Bad:
symbolic M,N,P;
gemm := {[i,j,k]:i>=0&&j>=0&&k>=0&&M-1>=0&&N-1>=0&&P-1>=0&&-i+N-1>=0&&-j+M-1>=0&&-k+P-1>=0};
r0 := {[i,j] -> [i,j,0,0]};
r1 := {[i,j,k] -> [i,j,1,k,0]};
codegen r0:gemm,r1:gemm given {[i,j,k]: M-1>=0&&N-1>=0&&P-1>=0};

Good:
>>> symbolic M,N,P;
>>> init := {[i,j]:i>=0&&j>=0&&M-1>=0&&N-1>=0&&-i+N-1>=0&&-j+M-1>=0};
>>> gemm := {[i,j,k]:i>=0&&j>=0&&k>=0&&M-1>=0&&N-1>=0&&P-1>=0&&-i+N-1>=0&&-j+M-1>=0&&-k+P-1>=0};
>>> r0 := {[i,j] -> [i,j,0,0]};
>>> r1 := {[i,j,k] -> [i,j,1,k]};
>>> codegen r0:init,r1:gemm given {[i,j,k]: M-1>=0&&N-1>=0&&P-1>=0};

===============================================================================================================

SPLATT Default Options:
  opts[SPLATT_OPTION_TOLERANCE]  = DEFAULT_TOL;
  opts[SPLATT_OPTION_REGULARIZE] = 0.;
  opts[SPLATT_OPTION_NITER]      = DEFAULT_ITS;
  DEFAULT_TOL = 1e-5
  DEFAULT_ITS = 50


Euler Debug:

consToPrim:
ypos=0,pt=(-4,-4)
xpos=0
U=(1.29546,0.458016,0.458016,2.40059,)
W=(1.29546,0.353553,0.353553,0.895464,)


Cori Modules:
module load cmake/3.14.0

Euler Fusion:
// Omega+ Code (N=64):
symbolic N;
c2p := {[y,x]: -3 <= y < N+3 && -3 <= x < N+3};
wsb := {[y,x]: 0 <= y < N && 0 <= x < N};
abs := {[y,x]: 0 <= y < N && 0 <= x < N};
r0 := {[y,x] -> [y,x,0]};
r1 := {[y,x] -> [y,x,1]};
r2 := {[y,x] -> [y,x,2]};
codegen r0:c2p,r1:wsb,r2:abs given {[y,x]: N >= 4};

// laplacian+increment+interpL_d1+interpH_d1
lap := {[c,y,x]: 0 <= c <= 3 && -3 <= y <= N+2 && -3 <= x <= N+2};
inc := {[c,y,x]: 0 <= c <= 3 && -3 <= y <= N+2 && -3 <= x <= N+2};
il1 := {[c,y,x]: 0 <= c <= 3 && -3 <= y <= N+2 && 0 <= x <= N+1};
ih1 := {[c,y,x]: 0 <= c <= 3 && -3 <= y <= N+2 && 0 <= x <= N};
r0 := {[c,y,x] -> [c,y,0,x]};
r1 := {[c,y,x] -> [c,y,0,x]};
r2 := {[c,y,x] -> [c,y,1,x]};
r3 := {[c,y,x] -> [c,y,1,x]};
codegen r0:lap,r1:inc,r2:il1,r3:ih1 given {[c,y,x]: N >=4};

// lap_f_d1+inc_f_d1+div_f_d1+inc_rhs_d1
flap := {[c,y,x]: 0 <= c <= 3 && -2 <= y < N+2 && 0 <= x < N+1};
finc := {[c,y,x]: 0 <= c <= 3 && -2 <= y < N+2 && 0 <= x < N+1};
fdiv := {[c,y,x]: 0 <= c <= 3 && -2 <= y < N+2 && 0 <= x < N};
rinc := {[c,y,x]: 0 <= c <= 3 && 0 <= y < N && 0 <= x < N};
r0 := {[c,y,x] -> [c,y,x,0]};
r1 := {[c,y,x] -> [c,y,x,1]};
r2 := {[c,y,x] -> [c,y,x,2]};
r3 := {[c,y,x] -> [c,y,x,3]};
codegen r0:flap,r1:finc,r2:fdiv,r3:rinc given {[c,y,x]: N >=4};